name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Building ${{ matrix.job.target }}
    runs-on: ${{ matrix.job.os }}

    strategy:
      fail-fast: false
      matrix:
        rust: [nightly]
        job:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            os-name: windows
            arch: x86_64
            bin-postfix: .exe

          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            os-name: linux
            arch: x86_64
            bin-postfix: ""

          - target: x86_64-apple-darwin
            os: macos-latest
            os-name: macos
            arch: x86_64
            bin-postfix: ""

    steps:
      - name: Installing Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Installing deps
        shell: bash
        run: |
          if [[ ${{ matrix.job.os }} == ubuntu-latest ]]; then
            sudo apt update
            sudo apt-get install -y libx11-dev libasound2-dev libudev-dev libwayland-dev libxkbcommon-dev
          elif [[ ${{ matrix.job.os }} == macos-latest ]]; then
            brew update --preinstall
            brew install michaeleisel/zld/zld
          fi

      - name: Cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          toolchain: ${{ matrix.rust }}
          args: --release --target ${{ matrix.job.target }}

      - name: Installing strip command
        shell: bash
        run: |
          if [[ ${{ matrix.job.target }} == aarch64-unknown-linux-gnu ]]; then
              sudo apt update
              sudo apt-get install -y binutils-aarch64-linux-gnu
          fi

      - name: Packaging final binary
        shell: bash
        run: |
          cd target/${{ matrix.job.target }}/release
          ####### reduce binary size by removing debug symbols #######
          echo "Stripping binary"
          BINARY_NAME=snakes${{ matrix.job.bin-postfix }}
          if [[ ${{ matrix.job.target }} == aarch64-unknown-linux-gnu ]]; then
            GCC_PREFIX="aarch64-linux-gnu-"
          else
            GCC_PREFIX=""
          fi
          "$GCC_PREFIX"strip $BINARY_NAME
          ########## create tar.gz ##########
          echo "Archiving binary"
          RELEASE_NAME=snakes-${GITHUB_REF/refs\/tags\//}-${{ matrix.job.os-name }}-${{ matrix.job.arch }}
          tar czvf $RELEASE_NAME.tar.gz $BINARY_NAME
          ########## create sha256 ##########
          echo "Creating hash"
          if [[ ${{ runner.os }} == 'Windows' ]]; then
            certutil -hashfile $RELEASE_NAME.tar.gz sha256 | grep -E [A-Fa-f0-9]{64} > $RELEASE_NAME.sha256
          else
            shasum -a 256 $RELEASE_NAME.tar.gz > $RELEASE_NAME.sha256
          fi

      - name: Creating release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/${{ matrix.job.target }}/release/snakes-*.tar.gz
            target/${{ matrix.job.target }}/release/snakes-*.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
